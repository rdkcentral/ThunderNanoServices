name: Linux build template

on:
  workflow_call:

jobs:
  ThunderNanoServices:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        build_type: [Debug, Release, MinSizeRel]
        architecture: [32, 64]

    name: Build type - ${{matrix.build_type}}${{matrix.architecture == '32' && ' x86' || ''}}
    steps:
# --------- Packages & artifacts ---------
    - name: Install necessary packages
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 10
        max_attempts: 10
        command: |
          sudo gem install apt-spy2
          sudo apt-spy2 fix --commit --launchpad --country=US
          echo "deb http://archive.ubuntu.com/ubuntu/ jammy main universe restricted multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb http://archive.ubuntu.com/ubuntu/ jammy-updates main universe restricted multiverse" | sudo tee -a /etc/apt/sources.list
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt install python3-pip build-essential cmake ninja-build libusb-1.0-0-dev zlib1g-dev zlib1g-dev:i386 libssl-dev gcc-11-multilib g++-11-multilib
          sudo pip install jsonref

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ThunderInterfaces-${{matrix.build_type}}${{matrix.architecture == '32' && '_x86' || ''}}-artifact
        path: ${{matrix.build_type}}

    - name: Unpack files
      run: |
        tar -xvzf ${{matrix.build_type}}/${{matrix.build_type}}${{matrix.architecture == '32' && '_x86' || ''}}.tar.gz
        rm ${{matrix.build_type}}/${{matrix.build_type}}${{matrix.architecture == '32' && '_x86' || ''}}.tar.gz

# ----- Regex & checkout -----
    - name: Checkout ThunderNanoServices
      uses: actions/checkout@v4
      with:
        path: ThunderNanoServices
        repository: ${{github.repository_owner}}/ThunderNanoServices

    - name: Regex ThunderNanoServices
      if: contains(github.event.pull_request.body, '[Options:')
      id: plugins
      uses: AsasInnab/regex-action@v1
      with:
        regex_pattern: '(?<=\[Options:).*(?=\])'
        regex_flags: 'gim'
        search_string: ${{github.event.pull_request.body}}

# ----- Building & uploading -----
    - name: Build ThunderNanoServices
      run: |
        cmake -G Ninja -S ThunderNanoServices -B ${{matrix.build_type}}/build/ThunderNanoServices \
        -DCMAKE_CXX_FLAGS="-Wall -Wextra -Wpedantic -Werror -m${{matrix.architecture}}" \
        -DCMAKE_C_FLAGS="-Wall -Wextra -Wpedantic -Werror -m${{matrix.architecture}}" \
        -DCMAKE_INSTALL_PREFIX="${{matrix.build_type}}/install/usr" \
        -DCMAKE_MODULE_PATH="${PWD}/${{matrix.build_type}}/install/usr/include/WPEFramework/Modules" \
        -DEXAMPLE_COMRPCCLIENT=ON \
        -DPLUGIN_CECCONTROL=ON \
        -DPLUGIN_COMMANDER=ON \
        -DPLUGIN_CONFIGUPDATEEXAMPLE=ON \
        -DPLUGIN_DHCPSERVER=ON \
        -DPLUGIN_DIALSERVER=ON \
        -DPLUGIN_DICTIONARY=ON \
        -DPLUGIN_FILETRANSFER=ON \
        -DPLUGIN_INPUTSWITCH=ON \
        -DPLUGIN_IOCONNECTOR=ON \
        -DPLUGIN_JSONRPC=ON \
        -DPLUGIN_NETWORKCONTROL=ON \
        -DPLUGIN_OUTOFPROCESS=ON \
        -DPLUGIN_PROCESSMONITOR=ON \
        -DPLUGIN_RESOURCEMONITOR=ON \
        -DPLUGIN_STATECONTROLLER=ON \
        -DPLUGIN_SWITCHBOARD=ON \
        -DPLUGIN_SYSTEMCOMMANDS=ON \
        -DPLUGIN_TESTCONTROLLER=ON \
        -DPLUGIN_TESTUTILITY=ON \
        -DPLUGIN_WEBPROXY=ON \
        -DPLUGIN_WEBSERVER=ON \
        -DPLUGIN_WEBSHELL=ON \
        -DPLUGIN_WIFICONTROL=ON \
        -DSTORE_TEST=ON \
        -DTEST_AUTOMATION_TOOLS=ON \
        ${{steps.plugins.outputs.first_match}}
        cmake --build ${{matrix.build_type}}/build/ThunderNanoServices --target install

    - name: Tar files
      run: tar -czvf ${{matrix.build_type}}${{matrix.architecture == '32' && '_x86' || ''}}.tar.gz ${{matrix.build_type}}

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: ThunderNanoServices-${{matrix.build_type}}${{matrix.architecture == '32' && '_x86' || ''}}-artifact
        path: ${{matrix.build_type}}${{matrix.architecture == '32' && '_x86' || ''}}.tar.gz
